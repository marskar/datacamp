The course I most recently completed on DataCamp was "Intro to Python for Data Science". Out of the 7 DataCamp courses I have completed, this one is my favorite!

Since Fall 2017, I have assigned "Intro to Python for Data Science" as homework to all students taking the Introduction to Python (BIOF309) course (https://github.com/marskar/biof309_fall2018) I teach at the Foundation for Advanced Education in the Sciences (FAES).

About a month into the Fall 2017 semester, the DataCamp mobile app was released with a mobile version of "Intro to Python for Data Science". Since then, I have recommended that everyone learning Python complete both the desktop and mobile versions of "Intro to Python for Data Science".

I greatly appreciate that this and other DataCamp courses are made freely available to students thanks to the "DataCamp for the Classroom" initiative!

I really like how the "Intro to Python for Data Science" course brings learners up to speed with Python, in particular by teaching them to interact with a Python script by sending lines of code to an IPython shell.

Based on my experiences teaching Python and R, I know it is important to build up basic workflow skills along with essential programming language concepts from the very beginning. In fact, I focus on workflows and different ways to run Python code in the first class of my Intro to Python course at FAES.

I also like the structure of "Intro to Python for Data Science", especially that functions, modules, and packages are introduced early on, before loops, logic, control flow and filtering in "Intermediate Python for Data Science". I find this order to be a more natural progression, and I believe it makes the course more accessible for learners.

The pace of "Intro to Python for Data Science" is perfect for learners that are new to Python. The course does a great job of explaining difficult concepts, like the logic behind why packages are divided into modules and why Python does not include every function as a builtin.

The only thing I would have done differently would have been to introduce the idea of importing user-defined functions from modules in the local filesystem. In essence, I believe learners should not only understand the principle of modularity, but also know how to apply it to their own code.

This concept could very easily fit within the math module examples in the "Functions and Packages" chapter of "Intro to Python for Data Science". For example, learners could first define a function that returns the cube of any number. Then, the description for the next exercise could say that the cube function is saved in a module called cube.py that is located in the current working directory. Finally, learners could import their own cube function and compare it with the pow function from the math module.

I prepared the code for the short example described above and made it available
- on github: https://github.com/marskar/biof309_fall2018/blob/master/cube/cube-vs-pow.py
- as an interactive Jupyter notebook: https://mybinder.org/v2/gh/marskar/biof309_fall2018/master?filepath=cube/cube.ipynb
- and in the JupyterLab Integrated Development Environment: https://mybinder.org/v2/gh/marskar/biof309_fall2018/master?urlpath=lab/tree/cube/cube.ipynb

The trade-off is that this deceptively simple example greatly adds to the cognitive burden that must be shouldered by learners, because it requires explanation of concepts needed to understand function definitions, such as the def statement and whitespace requirements. On the other hand, it empowers learners by showing them that writing and importing their own Python modules can be easy. This can make the gap between Python users and Python developers seems less insurmountable!

Exploratory Data Analysis in Python, Creating Robust Python Projects, Data Engineering for Data Scientists in Python, Dimensionality Reduction in Python, Feature engineering in Python, Interactive Python Dashboards, Intro to Tensorflow API in Python, Intro to PyTorch, Introduction to AI in Python, Introduction to Data Analysis (Science) in Python, Software Engineering for Data Scientists in Python, Writing Efficient Python Code, Object-oriented programming in Python, Functional programming in Python

I saw tweets by Chester Ismay (@old_man_chester), David Robinson (@drob), Hugo Bowne-Anderson, and Erin LeDell (@ledell): https://twitter.com/old_man_chester/status/1034519529911513088 https://twitter.com/old_man_chester/status/1026923294283329536 https://twitter.com/drob/status/1030105227767308294 https://twitter.com/hugobowne/status/1034520067197886466 https://twitter.com/ledell/status/1029797077239226369
