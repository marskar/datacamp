# Video 1 - Creating Robust Python Projects

Welcome to the course!
In this video, you will learn about Python Project Principles.

> In the Creating Robust Python Projects course overall,
you will learn to follow principles and best practices,
and to use helpful technologies and techniques
for writing and editing Python code and documentation.

> A project is a folder with project files inside.
I like to think of each project as a chance to
practice empathy for people who might want to use your code.
Time spent on crafting a good project is an investment in the future.

Project files can be in subdirectories or in the top-level directory.
In this example, all of the files are at the top level
except for analysis.ipynb, which is in the "code" subdirectory.
This brings us to our first Python Project Principle: Modularity.

> Analysis.ipynb is not in line with the Modularity Principle,
because every step in the analysis is done by one file.
A more modular approach would be to have one file for each step in the analysis.

> The opposite of modular is monolithic.
A monolithic file, like the analysis.ipynb file we saw earlier,
might contain all of the project's code, docs, and output.

This can be very convenient, but this convenience comes at a price. 

To get the best of both worlds start small
and then create a separate large file later on.

> If you begin to notice patterns in the code,
it is time to start thinking about the next Python Project Principle: Reusability.
According to the Reusability Principle, you should reuse code instead of repeating it. 
To avoid code repetition, you will need to use functions.
Functions are reusable blocks of code that can be defined once
and then called as many times as needed to get the job done.
To take our use of functions to the next level,
we will define functions in files called modules
and then call the functions in files called scripts.

> Modules and scripts are Python code files with .py extensions.
They differ only in how and why they are used.
Modules are imported to define functions (and other Python objects),
while scripts are run to perform actions (typically by calling functions).

> Here is an example module named say that defines a function named hello.
Next, there is an example script named greet that imports the say module and calls its hello function.
You may have noticed that I do not include the .py extension when referring to modules and scripts.

> A Python code file can be used as both a module and a script.

To make a module/script hybrid we need to use an if statement
that calls a function only when the file is run as a script
and not when it is imported as a module. 

In the example of the say module and greet script,
this if statement allows say to print "Hello World!" when it is run,
but also keeps the hello function from being called when say is imported.

What if we added the function call to say without the if statement? 
In that case, running greet would print "Hello World!" twice:
The first time when say is imported and then again when greet calls the hello function.

Python code files, regardless of whether they are modules or scripts, are executed immediately upon import.

> Scripts in data science projects are typically run in a sequence that be shown as a directed acyclic graph.

In the sequence, each script does one job and imports the tools it needs from modules in the project.

It can be tedious to run each script one after another.
Your first instinct may be to combine the scripts into a monolithic file.
Instead, you could write a script to run all of the other scripts in the project.
A clever way to do this is to use the import statement.
You can import one script per line or include all of the scripts on one line separated by commas.

I think it's worth repeating:
Python code files, regardless of whether they are modules or scripts, are executed immediately upon import.

> The script that uses the import statement to execute all of the other scripts in a project
should be at the top level and will be most useful if it is named __main__.py.
Double underscores around Python names are pronounced dunder.
The double underscores indicate that the name is special.
Python objects that have such names usually have some superpowers. 
The superpower of `__main__.py` is that
it can be executed from outside of a project using the project name.
This will work even if the project is zipped!

The ability to run a zipped project is a great example of
enjoying the convenience of a single file without sacrificing modularity!

